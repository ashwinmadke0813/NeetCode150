//https://leetcode.com/problems/valid-anagram/submissions/

Approach 1 : Using Sorting 
class Solution {
    public boolean isAnagram(String s, String t) {
	 //check if length of both strings are equal or not ,if not return false
        if(s.length()!=t.length()){
            return false;
        }
		 // Converting the strings to character arrays
        char[] str1 = s.toCharArray();
        char[] str2 = t.toCharArray();
        
		//Sort both the strings in ascending order
        Arrays.sort(str1);
        Arrays.sort(str2);
		
		
        / Comparing each character in the sorted arrays
        for(int i=0;i<s.length();i++){
		// If any of the character mismatches, return false
            if(str1[i] != str2[i]){
                return false;
            }
        }
		//If all the characters are identical in both the strings, return true
        return true;
       
    }
}
//TC-O(NlogN)
//SC-O(N)

/*
1.If the length of both the strings are different, then return false, else step 2
2.Sort both the strings s and t
3.Compare their characters one by one
a.If any of the character mismatches, return false
b.If all the characters are identical in both the strings, return true
*/



Approach -2 : Using hashing , one address table
class Solution {
    public boolean isAnagram(String s, String t) {
        //check if length of both strings are equal or not ,if not return false
        if(s.length()!=t.length()){
            return false;
        }
        //array to keep count of occurrences of each character
        int count[] = new int[26];
        
       // Count the occurrences of each character in the first string
        for(int i=0;i<s.length();i++){
            count[s.charAt(i) -'a']++;
        }
        
        //Substract the occurrences of each character in the second string
        for(int i=0;i<t.length();i++){
            count[t.charAt(i) -'a']--;
        }
         // Check if all the index of counter contains 0 in the end, return true else return false
        for(int i=0;i<count.length;i++){
            if(count[i]!=0){
                return false;
            }
        }
        return true;
       
    }
}
//TC-O(N)
//SC-O(1)


